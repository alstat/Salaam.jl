var documenterSearchIndex = {"docs":
[{"location":"book/structure/#Structure-of-Arabic-Grammar","page":"Structure of Arabic Grammar","title":"Structure of Arabic Grammar","text":"","category":"section"},{"location":"book/structure/#Grammar","page":"Structure of Arabic Grammar","title":"Grammar","text":"","category":"section"},{"location":"book/structure/#Part-of-Speech","page":"Structure of Arabic Grammar","title":"Part of Speech","text":"","category":"section"},{"location":"man/qurantree/#Working-with-QuranTree.jl","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"","category":"section"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"Salaam.jl can seemlessly work with QuranTree.jl.","category":"page"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"using Pkg\nPkg.add(\"QuranTree\")","category":"page"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"using Salaam\nusing QuranTree\n\ndata = QuranData();\ncrps, tnzl = load(data);\ncrpsdata = table(crps)\ntnzldata = table(tnzl)\nSalaam.arabic(verses(crpsdata[114])[1])","category":"page"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"note: Note\nYou have to install QuranTree.jl to run the above example. To install, runusing Pkg\nPkg.add(\"QuranTree\")","category":"page"},{"location":"man/qurantree/#Normalization","page":"Working with QuranTree.jl","title":"Normalization","text":"","category":"section"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"ikhlas = crpsdata[114]\nikhlas_vrs = verses(ikhlas)\nikhlas_nrm = Salaam.normalize.(ikhlas_vrs)\nSalaam.arabic.(ikhlas_nrm)","category":"page"},{"location":"man/qurantree/#Dediacritization","page":"Working with QuranTree.jl","title":"Dediacritization","text":"","category":"section"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"ikhlas_ddc = Salaam.dediac.(ikhlas_vrs)\nSalaam.arabic.(ikhlas_ddc)","category":"page"},{"location":"man/qurantree/#Transliteration","page":"Working with QuranTree.jl","title":"Transliteration","text":"","category":"section"},{"location":"man/qurantree/","page":"Working with QuranTree.jl","title":"Working with QuranTree.jl","text":"ar_ikhlas = verses(tnzldata[114])\nSalaam.encode.(ar_ikhlas)","category":"page"},{"location":"man/orthography/#Orthographical-Analysis","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"All Arabic characters and diacritics and other characters used in Arabic texts, such as the Qur'an are all encoded as structs or types. These types have properties that can be used for orthographical analysis. These properties are the vocal and numeral associated with each of the character.","category":"page"},{"location":"man/orthography/#Numerals","page":"Orthographical Analysis","title":"Numerals","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"The numerals we refer here is the Abjad numeral.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"using Salaam\n\nar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\";","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"If we want to take the numerals, we need to tokenize it first.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"arb_token = tokenize(ar_basmala)","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Next we then parse each of these words as   Orthography.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"arb_parsed1 = parse(Orthography, arb_token[1])\narb_parsed2 = parse.(Orthography, arb_token)","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Finally, we can compute the numerals of the parsed tokens as follows:","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"numeral(arb_parsed2[1])\nnumeral(arb_parsed2[2])\nnumeral(arb_parsed2[3])","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"We can also check the type of the characters, whether it is a Lunar or Solar character. To do this, use the isfeat (short for 'is feature' in the sense that characters here are also referred as feature).","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"isfeat(arb_parsed2[1], AbstractLunar)\narb_parsed2[1][isfeat(arb_parsed2[1], AbstractLunar)]\nisfeat.(arb_parsed2, AbstractLunar)\nisfeat.(arb_parsed2, AbstractSolar)","category":"page"},{"location":"man/orthography/#Vocals","page":"Orthographical Analysis","title":"Vocals","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Vocals refer to categorization of the characters based on the vocals it mainly uses in pronunciation.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"vocal(arb_parsed2[1])\nvocal(arb_parsed2[2])\nvocal(arb_parsed2[3])","category":"page"},{"location":"man/orthography/#Simple-Encoding","page":"Orthographical Analysis","title":"Simple Encoding","text":"","category":"section"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"Simple encoding is a worded or spelled out transliteration of the arabic text.","category":"page"},{"location":"man/orthography/","page":"Orthographical Analysis","title":"Orthographical Analysis","text":"parse(SimpleEncoding, ar_basmala)","category":"page"},{"location":"book/introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"book/introduction/#What-to-expect?","page":"Introduction","title":"What to expect?","text":"","category":"section"},{"location":"book/introduction/#Content","page":"Introduction","title":"Content","text":"","category":"section"},{"location":"man/basic_utilities/#Basic-Utilities","page":"Basic Utilities","title":"Basic Utilities","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"In this section, we are going to discuss how to use the APIs for dediacritization, normalization and transliteration.","category":"page"},{"location":"man/basic_utilities/#Dediacritization","page":"Basic Utilities","title":"Dediacritization","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The function to use is dediac, which works on Arabic, Buckwalter and custom transliterated characters.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"using Salaam\n\nar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\";\ndediac(ar_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Or using Buckwalter as follows:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\";\ndediac(bw_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"With Julia's broadcasting feature, the above dediacritization can be applied to arrays by simply adding . to the name of the function.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"sentence0 = [\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\",\n    \"إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ\"\n]\ndediac.(sentence0)","category":"page"},{"location":"man/basic_utilities/#Normalization","page":"Basic Utilities","title":"Normalization","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The function to use is normalize, which works on Arabic, Buckwalter and custom transliterated characters. For example, using the ar_basmala and bw_basmala defined above, the normalized version would be","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala)\nnormalize(bw_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"You can also normalize specific characters, for example:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala, :alif_khanjareeya)\nnormalize(ar_basmala, :hamzat_wasl)\nsentence1 = \"وَٱلَّذِينَ يُؤْمِنُونَ بِمَآ أُنزِلَ إِلَيْكَ وَمَآ أُنزِلَ مِن قَبْلِكَ وَبِٱلْءَاخِرَةِ هُمْ يُوقِنُونَ\";\nnormalize(sentence1, :alif_maddah)\nnormalize(sentence1, :alif_hamza_above)\nsentence2 = \"إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ\";\nnormalize(sentence2, :alif_hamza_below)\nsentence3 = \"ٱلَّذِينَ يُؤْمِنُونَ بِٱلْغَيْبِ وَيُقِيمُونَ ٱلصَّلَوٰةَ وَمِمَّا رَزَقْنَٰهُمْ يُنفِقُونَ\";\nnormalize(sentence3, :waw_hamza_above)\nnormalize(sentence3, :ta_marbuta)\nsentence4 = \"ٱللَّهُ يَسْتَهْزِئُ بِهِمْ وَيَمُدُّهُمْ فِى طُغْيَٰنِهِمْ يَعْمَهُونَ\";\nnormalize(sentence4, :ya_hamza_above)\nsentence5 = \"ذَٰلِكَ ٱلْكِتَٰبُ لَا رَيْبَ فِيهِ هُدًى لِّلْمُتَّقِينَ\";\nnormalize(sentence5, :alif_maksura)\nsentence6 = \"ﷺ\"\nnormalize(sentence6) === \"صلى الله عليه وسلم\"\nsentence7 = \"ﷻ\"\nnormalize(sentence7) === \"جل جلاله\"\nsentence8 = \"﷽\"\nnormalize(sentence8) === ar_basmala","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Or a combination,","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(ar_basmala, [:alif_khanjareeya, :hamzat_wasl])","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Broadcasting also applies to normalize function.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize.(sentence0)\nnormalize.(sentence0, [:alif_khanjareeya, :alif_hamza_below])","category":"page"},{"location":"man/basic_utilities/#Transliteration","page":"Basic Utilities","title":"Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"By default, Salaam.jl uses extended Buckwalter transliteration. The function to use are encode (Arabic -> Roman) and arabic (Roman -> Arabic). The following are some examples:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"arabic(bw_basmala)\narabic(bw_basmala) === ar_basmala\nencode(ar_basmala)\nencode(ar_basmala) === bw_basmala","category":"page"},{"location":"man/basic_utilities/#Custom-Transliteration","page":"Basic Utilities","title":"Custom Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"For custom transliteration, user must specify the character mapping in a dictionary with Symbol type for both keys and values. By default, the Buckwalter mapping used in Salaam.jl is encoded in the constant variable BW_ENCODING.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"BW_ENCODING","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Suppose we want to create a custom transliteration by simply reversing the values of the dictionary, then we have the following:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"old_keys = collect(keys(BW_ENCODING));\nnew_vals = reverse(collect(values(BW_ENCODING)));","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"The new dictionary would be:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"my_encoder = Dict(old_keys .=> new_vals)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Next is to declare this new transliteration so functions for dediacritization and normalization can use the new mapping. This is done using the macro @transliterator, which takes two arguments: the dictionary and the type name of the mapping.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"@transliterator my_encoder \"MyEncoder\"","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Using this new transliteration, we now have an updated mapping for the basmala above:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"encode(ar_basmala)","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"Reversing this two Arabic characters should give us the appropriate decoding:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"arabic(encode(ar_basmala))","category":"page"},{"location":"man/basic_utilities/#Dediacritization-and-Normalization-on-Custom-Transliteration","page":"Basic Utilities","title":"Dediacritization and Normalization on Custom Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"As mentioned above, dediacritization and normalization also works on new custom transliteration. For example, dediacritizing the encoded ar_basmala would give us:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"dediac(encode(ar_basmala))\n\ndediac(encode(ar_basmala)) |> arabic","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"And for normalization, ","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"normalize(encode(ar_basmala))\n\nnormalize(encode(ar_basmala)) |> arabic","category":"page"},{"location":"man/basic_utilities/#Reset-Transliteration","page":"Basic Utilities","title":"Reset Transliteration","text":"","category":"section"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"To reset the transliteration back to Buckwalter, simply specify :default as the argument for the macro @transliterator as follows:","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"@transliterator :default","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"With this, all functions dependent on transliteration will also get updated.","category":"page"},{"location":"man/basic_utilities/","page":"Basic Utilities","title":"Basic Utilities","text":"encode(ar_basmala)\nencode(ar_basmala) === bw_basmala\ndediac(encode(ar_basmala))\nnormalize(encode(ar_basmala))","category":"page"},{"location":"#Welcome-to-Salaam.jl-Documentation","page":"Home","title":"Welcome to Salaam.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Salaam.jl is a light suite for Arabic Natural Language Processing (ANLP). It offers APIs for the building blocks of ANLP specifically dediacritization, normalization, transliteration (including custom transliteration), simple encoding, and orthographical analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Salaam (سلام) /səˈläm/ is the Arabic word for \"peace,\" a common greeting among Arabic-speaking countries and among non-Arabic-speaking Muslims around the world.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"Salaam\")","category":"page"},{"location":"#Outline","page":"Home","title":"Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/basic_utilities.md\",\n    \"man/orthography.md\",\n    \"man/qurantree.md\",\n    \"man/api.md\",\n]\nDepth = 2","category":"page"},{"location":"book/verb/#Verb","page":"Verb","title":"Verb","text":"","category":"section"},{"location":"book/verb/","page":"Verb","title":"Verb","text":"Arabic words are all based on a root triliteral verb, and rarely quadriliteral. From these root verbs form other words through addition of clitics.","category":"page"},{"location":"book/verb/#Verb-Forms","page":"Verb","title":"Verb Forms","text":"","category":"section"},{"location":"book/verb/","page":"Verb","title":"Verb","text":"There are 15 verb forms in total, but the last 3 rarely occurs. Consider for example the word فَعَلَ (to kill), the different forms are as follows:","category":"page"},{"location":"man/api/#API-References","page":"API","title":"API References","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Modules = [Salaam]","category":"page"},{"location":"man/api/#Salaam.arabic-Tuple{String}","page":"API","title":"Salaam.arabic","text":"arabic(s::String[, encoder::AbstractEncoder])\n\nEncode the String object into Arabic characters. Custom encoder generated from @transliterator can be provided, but default is Buckwalter.\n\nExamples\n\njulia> bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\njulia> arabic(bw_basmala)\n\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Salaam.dediac-Tuple{String}","page":"API","title":"Salaam.dediac","text":"dediac(s::String)\n\nDediacritize the input String object.\n\nExamples\n\njulia> bw_basmala = \"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\njulia> dediac(bw_basmala)\n\"bsm {llh {lrHmn {lrHym\"\njulia> dediac(arabic(bw_basmala))\n\"بسم ٱلله ٱلرحمن ٱلرحيم\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Salaam.encode-Tuple{String}","page":"API","title":"Salaam.encode","text":"encode(s::String)\n\nTransliterate the input String object using Buckwalter.\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> encode(ar_basmala)\n\"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Salaam.encode-Tuple{Union{Char, String}, AbstractEncoder}","page":"API","title":"Salaam.encode","text":"encode(s::Union{Char,String}, encoder::AbstractEncoder)\n\nTransliterate the input String object using a custom encoder. Custom encoder is generated using the @transliterator.\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Salaam.normalize-Tuple{String, Symbol}","page":"API","title":"Salaam.normalize","text":"normalize(s::String, char::Symbol)\n\nNormalize a specific Arabic or Buckwalter String character (chars).\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> normalize(ar_basmala, :alif_khanjareeya) === \"بِسْمِ ٱللَّهِ ٱلرَّحْمَانِ ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Salaam.normalize-Tuple{String, Vector{Symbol}}","page":"API","title":"Salaam.normalize","text":"normalize(s::String, chars::Array{Symbol,1})\n\nNormalize a specific Arabic or Buckwalter String character/s (chars).\n\nExamples\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> normalize(ar_basmala, [:alif_khanjareeya, :hamzat_wasl]) === \"بِسْمِ اللَّهِ الرَّحْمَانِ الرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Salaam.normalize-Tuple{String}","page":"API","title":"Salaam.normalize","text":"normalize(s::String)\n\nNormalize a Arabic or Buckwalter String characters.\n\nExamples\n\njulia> normalize(\"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\")\n\"بِسْمِ اللَّهِ الرَّحْمَانِ الرَّحِيمِ\"\n\n\n\n\n\n","category":"method"},{"location":"man/api/#Salaam.tokenize","page":"API","title":"Salaam.tokenize","text":"tokenize(s::String)\n\ntokenizes the string input s by space, and also tokenizes the punctuations.\n\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> tokenize(ar_basmala)\n4-element Vector{String}:\n \"بِسْمِ\"\n \"ٱللَّهِ\"\n \"ٱلرَّحْمَٰنِ\"\n \"ٱلرَّحِيمِ\"\n\n\n\n\n\n","category":"function"},{"location":"man/api/#Salaam.@transliterator-Tuple{Any, Any}","page":"API","title":"Salaam.@transliterator","text":"@transliterator(dict, name)\n\nCreate a custom transliterator using an input dict (Dict object) with its corresponding name as String object. This will automatically update the transliterator inside all  functions like arabic, verses, and encode.\n\nExamples\n\njulia> my_encoder = Dict(\n    Symbol(Char(0x0621)) => Symbol('('),\n    Symbol(Char(0x0622)) => Symbol('''),\n    Symbol(Char(0x0623)) => Symbol('&'),\n    Symbol(Char(0x0624)) => Symbol('>'),\n    Symbol(Char(0x0625)) => Symbol('}'),\n    Symbol(Char(0x0626)) => Symbol('<'),\n    Symbol(Char(0x0627)) => Symbol('b'),\n    Symbol(Char(0x0628)) => Symbol('A'),\n    Symbol(Char(0x0629)) => Symbol('t'),\n    Symbol(Char(0x062A)) => Symbol('p'),\n    Symbol(Char(0x062B)) => Symbol('j'),\n    Symbol(Char(0x062C)) => Symbol('v'),\n    Symbol(Char(0x062D)) => Symbol('x'),\n    Symbol(Char(0x062E)) => Symbol('H'),\n    Symbol(Char(0x062F)) => Symbol('*'),\n    Symbol(Char(0x0630)) => Symbol('d'),\n    Symbol(Char(0x0631)) => Symbol('z'),\n    Symbol(Char(0x0632)) => Symbol('r'),\n    Symbol(Char(0x0633)) => Symbol('$'),\n    Symbol(Char(0x0634)) => Symbol('s'),\n    Symbol(Char(0x0635)) => Symbol('D'),\n    Symbol(Char(0x0636)) => Symbol('S'),\n    Symbol(Char(0x0637)) => Symbol('Z'),\n    Symbol(Char(0x0638)) => Symbol('T'),\n    Symbol(Char(0x0639)) => Symbol('g'),\n    Symbol(Char(0x063A)) => Symbol('E'),\n    Symbol(Char(0x0640)) => Symbol('f'),\n    Symbol(Char(0x0641)) => Symbol('_'),\n    Symbol(Char(0x0642)) => Symbol('k'),\n    Symbol(Char(0x0643)) => Symbol('q'),\n    Symbol(Char(0x0644)) => Symbol('m'),\n    Symbol(Char(0x0645)) => Symbol('l'),\n    Symbol(Char(0x0646)) => Symbol('h'),\n    Symbol(Char(0x0647)) => Symbol('n'),\n    Symbol(Char(0x0648)) => Symbol('Y'),\n    Symbol(Char(0x0649)) => Symbol('w'),\n    Symbol(Char(0x064A)) => Symbol('F'),\n    Symbol(Char(0x064B)) => Symbol('y'),\n    Symbol(Char(0x064C)) => Symbol('K'),\n    Symbol(Char(0x064D)) => Symbol('N'),\n    Symbol(Char(0x064E)) => Symbol('u'),\n    Symbol(Char(0x064F)) => Symbol('a'),\n    Symbol(Char(0x0650)) => Symbol('~'),\n    Symbol(Char(0x0651)) => Symbol('i'),\n    Symbol(Char(0x0652)) => Symbol('^'),\n    Symbol(Char(0x0653)) => Symbol('o'),\n    Symbol(Char(0x0654)) => Symbol('`'),\n    Symbol(Char(0x0670)) => Symbol('#'),\n    Symbol(Char(0x0671)) => Symbol(':'),\n    Symbol(Char(0x06DC)) => Symbol('{'),\n    Symbol(Char(0x06DF)) => Symbol('\"'),\n    Symbol(Char(0x06E0)) => Symbol('@'),\n    Symbol(Char(0x06E2)) => Symbol(';'),\n    Symbol(Char(0x06E3)) => Symbol('['),\n    Symbol(Char(0x06E5)) => Symbol('.'),\n    Symbol(Char(0x06E6)) => Symbol(','),\n    Symbol(Char(0x06E8)) => Symbol('-'),\n    Symbol(Char(0x06EA)) => Symbol('!'),\n    Symbol(Char(0x06EB)) => Symbol('%'),\n    Symbol(Char(0x06EC)) => Symbol('+'),\n    Symbol(Char(0x06ED)) => Symbol(']')\n);\njulia> @transliterator my_encoder \"MyEncoder\"\njulia> encode(ar_basmala)\n\"A~$^l~ :mmiun~ :mziux^lu#h~ :mziux~Fl~\"\n\n\n\n\n\n","category":"macro"},{"location":"man/api/#Salaam.@transliterator-Tuple{Any}","page":"API","title":"Salaam.@transliterator","text":"@transliterator(symbl)\n\nFallback to the default Buckwalter transliterator.\n\njulia> @transliterator :default\njulia> ar_basmala = \"بِسْمِ ٱللَّهِ ٱلرَّحْمَٰنِ ٱلرَّحِيمِ\"\njulia> encode(ar_basmala)\n\"bisomi {ll~ahi {lr~aHoma`ni {lr~aHiymi\"\n\n\n\n\n\n","category":"macro"}]
}
